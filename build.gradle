/*
 * Copyright 2014 GoDataDriven B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'com.github.jengelman.gradle.plugins', name: 'shadow', version: '1.1.2'
        classpath group: 'com.github.ben-manes', name: 'gradle-versions-plugin', version: '0.9'
        classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.2.4'
    }
}

plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.2.4'
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'groovy'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'pl.allegro.tech.build.axion-release'

import com.github.zafarkhaja.semver.Version

scmVersion {
    tag {
        prefix = rootProject.name
    }
    versionCreator { versionFromTag, scmPosition ->
        scmPosition.onTag || scmPosition.branch.startsWith('support/')
            ? versionFromTag
            : Version.valueOf(versionFromTag).incrementMinorVersion()
    }
}

defaultTasks 'clean', 'build'

group   = 'io.divolte'
// Order matters: the version has to be after the scmVersion extension has determined the version.
project.version = scmVersion.version

sourceCompatibility = 1.8
mainClassName = 'io.divolte.server.Server'
applicationName = rootProject.name
applicationDefaultJvmArgs = [
        "-XX:+UseG1GC",
        "-Djava.awt.headless=true"
]

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repository-saucelabs.forge.cloudbees.com/release'
    }
    maven {
        url 'http://repository.codehaus.org/'
    }
}

dependencies {
    compile group: 'io.divolte', name: 'divolte-schema', version: '0.2.1'
    compile group: 'io.undertow', name: 'undertow-core', version: '1.0.16.Final'
    compile group: 'com.typesafe', name: 'config', version: '1.3.0'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'org.apache.avro', name: 'avro', version: '1.7.7'

    /*
     * We package the Avro Tools to provide an easy way to view Avro files
     * Because the default artifact (without the nodeps classifier) contains
     * some kind of uberjar with a old hadoop dependency, we manually include
     * the deps that we require for the tools to work and depend on the nodeps
     * variant of the tools itself. This is the minimal list to make the tool
     * run and have a working tojson command. The other commands weren't fully
     * tested with these deps.
     */
    compile group: 'org.apache.avro', name: 'avro-tools', version: '1.7.7', classifier: 'nodeps'
    compile group: 'org.apache.avro', name: 'trevni-core', version: '1.7.7'
    compile group: 'org.apache.avro', name: 'avro-mapred', version: '1.7.7'

    compile (group: 'org.apache.hadoop', name:'hadoop-common', version: '2.4.1') {
        exclude group: 'jline', module: 'jline'
    }
    compile group: 'org.apache.hadoop', name:'hadoop-hdfs', version: '2.4.1'
    compile (group: 'net.sf.uadetector', name: 'uadetector-core', version: '0.9.22') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
    compile group: 'net.sf.uadetector', name: 'uadetector-resources', version: '2014.10'
    compile (group: 'com.maxmind.geoip2', name: 'geoip2', version:'0.8.1') {
        // We only use DB mode, and Google's HTTP client pulls in Apache HTTP
        // client which conflicts with the version via Hadoop.
        exclude group: 'com.google.http-client', module: 'google-http-client'
    }
    compile group: 'org.apache.kafka', name:'kafka_2.10', version:'0.8.2.0'
    compile group: 'com.google.javascript', name:'closure-compiler', version:'v20150505'
    compile group: 'org.codehaus.groovy', name:'groovy', version: '2.4.3', classifier: 'indy'
    compile group: 'net.sf.jopt-simple', name:'jopt-simple', version: '4.8'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.0.0'
    compile group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: '2.5.3'

    compile group: 'org.apache.flume', name: 'flume-ng-sdk', version: '1.5.2'

    // We use the SLF4J API. At runtime, this is LogBack.
    // (We also force any dependencies that use Log4J to go via SLF4J.)
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
    runtime group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.12'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
    testCompile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.5'
    testCompile group: 'com.fasterxml.jackson.core', name:'jackson-databind', version: '2.5.3'
    testCompile group: 'com.fasterxml.jackson.module', name:'jackson-module-parameter-names', version: '2.5.3'
    testCompile group: 'com.fasterxml.jackson.datatype', name:'jackson-datatype-jdk8', version: '2.5.3'
    testCompile group: 'com.saucelabs', name:'sauce_junit', version: '2.1.19'
    // Warning: SauceLabs doesn't work properly with Selenium 2.44.
    testCompile group: 'org.seleniumhq.selenium', name:'selenium-java', version: '2.43.1'
    // Warning: PhantomJSDriver 1.2.0 doesn't work properly with Selenium 2.44.
    testCompile group: 'com.github.detro', name: 'phantomjsdriver', version: '1.2.0'
}

configurations {
    // Exclude all traces of Log4J via transitive dependencies.
    // (At runtime these are redirected over SLF4J.)
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

shadowJar {
    mergeServiceFiles()
}

// This applies to all JavaCompile tasks, not just :compileJava
// (which is the delegate for compileJava {}).
tasks.withType(JavaCompile) {
    // All our files are UTF-8 encoded.
    options.encoding = 'UTF-8'

    // Log details about usage of deprecated symbols.
    options.deprecation = true

    // Java 8 feature: parameter names via reflection, which makes
    // stuff like Jackson mapping easier.
    options.compilerArgs = ["-parameters"]
}

tasks.withType(FindBugs) {
    classes = classes.filter {
        !it.path.contains("io/divolte/groovyscript/")
    }
    dependsOn = [compileJava, compileTestJava]
}

findbugs() {
    toolVersion = "3.0.1"
    excludeFilter = file("config/findbugs/findbugs-excludes.xml")
}

pmd {
    toolVersion = "5.3.1"
    ruleSets = [
            "java-basic",
            "java-braces",
            "java-clone",
            "java-empty",
            "java-finalizers",
            'java-sunsecure',
            "java-imports",
            "java-unnecessary"
    ]
}

checkstyle {
    toolVersion = "6.6"
}

jacoco {
    toolVersion = "0.7.4.201502262128"
}

findbugsMain.reports {
    xml.enabled = true
    html.enabled = false
}
findbugsTest.reports {
    xml.enabled = true
    html.enabled = false
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

/*
 * This only applies to running with gradle run. We use a different run
 * script when creating a distribution.
 */
run {
    if (System.getenv().containsKey("HADOOP_CONF_DIR")) {
        classpath += files(System.getenv("HADOOP_CONF_DIR"))
    }
    if (System.getenv().containsKey("YARN_CONF_DIR")) {
        classpath += files(System.getenv("YARN_CONF_DIR"))
    }
}

/*
 * Build distribution .tar.gz or .zip. We don't use the distribution
 * plugin as that allows for less flexibility in laying out the
 * archive. It also conflicts in non-trivial ways with the application
 * plugin (or the other way around).
 */
def distributionLayout = {
    def baseDir = archiveName - (".${extension}")

    into("${baseDir}/lib/") {
        from project.configurations.runtime
    }
    into("${baseDir}/lib/") {
        from(project.buildDir.path + "/libs") {
            include "**/*.jar"
        }
    }

    into("${baseDir}/conf/") {
        from("src/dist/conf") {
            include "**/*"
        }
        // Use the reference.conf as a example application.conf
        from("src/main/resources/reference.conf") {
            rename("reference.conf", "divolte-collector.conf.example")
        }
    }

    into("${baseDir}/bin/") {
        from("src/scripts") {
            include "**/*"
        }
    }
}

task tarball(dependsOn: build, type: Tar) {
    compression = Compression.GZIP
    extension = "tar.gz"

    configure distributionLayout
}

task zip(dependsOn: build, type: Zip) {
    configure distributionLayout
}


/*
 * Generate Sphinx documentation
 */
task processUserDoc {
    ext.source = file("docs")
    ext.sphinxDir = new File(buildDir, "sphinx")
    inputs.dir source
    outputs.dir sphinxDir
}

import org.apache.tools.ant.filters.ReplaceTokens

processUserDoc << {
    // Copy/replace @version@
    copy {
        from(source) {
            filter(ReplaceTokens, tokens: ["version": version])
        }
        into sphinxDir
        exclude "**/*.png"
    }
    // Copy images (no replacement)
    copy {
        from(source)
        into sphinxDir
        include "**/*.png"
    }
}

task userDoc(dependsOn: processUserDoc, type: Exec) {
    ext.sphinxDir = processUserDoc.sphinxDir
    ext.htmlDocDir = new File(buildDir, "userdoc/html")
    inputs.dir sphinxDir
    outputs.dir htmlDocDir

    workingDir sphinxDir

    executable "sphinx-build"
    args '-b', 'html', sphinxDir, htmlDocDir
}

def sourceFiles = copySpec {
    from('.') {
        exclude 'build'
        exclude 'docs'
        exclude 'rpm'
        exclude 'target'
        exclude '.idea'
        exclude '.gradle'
        exclude '**/.git*'
        exclude '.git*'
        exclude '**/*.ipr'
        exclude '**/*.iws'
        exclude '**/*.iml'
    }
}

task tarSource(type: Tar) {
    description = "Tars the source distribution."
    compression = Compression.GZIP
    extension = "tar.gz"

    into("divolte-collector-" + version) {
        with sourceFiles
    }
}

task copySourceTar(type: Copy) {
    dependsOn = [tarSource]
    from('build/distributions/') {
        include '*.tar.gz'
    }
    into 'rpm/SOURCES'
}

import java.text.SimpleDateFormat

def buildTime() {
    final SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss")
    df.setTimeZone(TimeZone.getTimeZone("GMT"))
    return df.format(new Date())
}

task buildRpm(type:Exec) {
    dependsOn = [copySourceTar]

    workingDir 'rpm'

    if (version.contains('SNAPSHOT')) {
        commandLine 'rpmbuild', '-ba',
            '--target', 'noarch-redhat-linux',
            '--define', 'snapshotVersion -SNAPSHOT',
            '--define', 'dist _' + buildTime(),
            'divolte-collector.spec'
    } else {
        commandLine 'rpmbuild', '-ba',
            '--target', 'noarch-redhat-linux',
            'divolte-collector.spec'
    }
}
